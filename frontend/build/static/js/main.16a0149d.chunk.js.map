{"version":3,"sources":["CoffeeList.js","App.js","serviceWorker.js","index.js"],"names":["CoffeeList","props","readData","state","products","bind","self","this","axios","get","window","global","api_location","then","response","console","log","data","setState","catch","error","table","i","length","push","key","name","price","sku","style","marginBottom","Table","getProducts","React","Component","App","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","FormControl","type","placeholder","Button","variant","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gVAqEeA,E,kDAnCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,WACL,EAAKC,MAAQ,CAACC,SAAU,IAExB,EAAKF,SAAW,EAAKA,SAASG,KAAd,gBALD,E,uDA3Bf,IAAMC,EAAOC,KACbC,IAAMC,IAAIC,OAAOC,OAAOC,aAAa,aAAaC,MAAK,SAASC,GAC5DC,QAAQC,IAAIF,EAASG,MAErBX,EAAKY,SAAS,CAACd,SAAUU,EAASG,UACnCE,OAAM,SAAUC,GACfL,QAAQC,IAAII,Q,oCAOhB,IAFA,IAAIC,EAAQ,GAEHC,EAAE,EAAGA,EAAIf,KAAKJ,MAAMC,SAASmB,OAAQD,IAE1CD,EAAMG,KACN,wBAAIC,IAAKH,GACL,4BAAKf,KAAKJ,MAAMC,SAASkB,GAAGI,MAC5B,4BAAKnB,KAAKJ,MAAMC,SAASkB,GAAGK,OAC5B,4BAAKpB,KAAKJ,MAAMC,SAASkB,GAAGM,OAKpC,OAAOP,M,8CAYT,OACE,6BACI,wBAAIQ,MAAO,CAACC,aAAc,SAA1B,QACA,kBAACC,EAAA,EAAD,KACI,+BACI,4BACI,oCAGA,qCAGA,qCAKR,+BACKxB,KAAKyB,qB,GAzDDC,IAAMC,W,YC6BhBC,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,eACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKV,UAAU,WACb,kBAACU,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,SAEF,kBAACO,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAAShB,UAAU,YACxD,kBAACiB,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,aAIN,kBAAC,EAAD,QChBcC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMgD,c","file":"static/js/main.16a0149d.chunk.js","sourcesContent":["import React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport axios from 'axios';\n\nclass CoffeeList extends React.Component {\n\n    readData() {\n        const self = this;\n        axios.get(window.global.api_location+'/products').then(function(response) {\n            console.log(response.data);\n\n            self.setState({products: response.data});\n        }).catch(function (error){\n            console.log(error);\n        });\n    }\n\n    getProducts() {\n        let table = []\n\n        for (let i=0; i < this.state.products.length; i++) {\n\n            table.push(\n            <tr key={i}>\n                <td>{this.state.products[i].name}</td>\n                <td>{this.state.products[i].price}</td>\n                <td>{this.state.products[i].sku}</td>\n            </tr>\n            );\n        }\n\n        return table\n    }\n\n    constructor(props) {\n        super(props);\n        this.readData();\n        this.state = {products: []};\n    \n        this.readData = this.readData.bind(this);\n    }\n\n    render() {\n      return (\n        <div>\n            <h1 style={{marginBottom: \"40px\"}}>Menu</h1>\n            <Table>\n                <thead>\n                    <tr>\n                        <th>\n                            Name\n                        </th>\n                        <th>\n                            Price\n                        </th>\n                        <th>\n                            SKU\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.getProducts()}\n                </tbody>\n            </Table>\n        </div>\n      ) \n    }\n}\n\nexport default CoffeeList;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport CoffeeList from './CoffeeList.js'\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Coffee Shop</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#link\">Link</Nav.Link>\n          </Nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n      <CoffeeList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\"localhost\", window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}